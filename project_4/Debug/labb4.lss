
labb4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001dc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000003cc  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000669  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include <util/delay.h>
#include "DIO.h"
#include "BIT_MATH.h"

int main(void){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
u8 seg_cath[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  96:	ce 01       	movw	r24, r28
  98:	02 96       	adiw	r24, 0x02	; 2
  9a:	9d 87       	std	Y+13, r25	; 0x0d
  9c:	8c 87       	std	Y+12, r24	; 0x0c
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	ff 87       	std	Y+15, r31	; 0x0f
  a4:	ee 87       	std	Y+14, r30	; 0x0e
  a6:	fa e0       	ldi	r31, 0x0A	; 10
  a8:	f8 8b       	std	Y+16, r31	; 0x10
  aa:	ee 85       	ldd	r30, Y+14	; 0x0e
  ac:	ff 85       	ldd	r31, Y+15	; 0x0f
  ae:	00 80       	ld	r0, Z
  b0:	8e 85       	ldd	r24, Y+14	; 0x0e
  b2:	9f 85       	ldd	r25, Y+15	; 0x0f
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	9f 87       	std	Y+15, r25	; 0x0f
  b8:	8e 87       	std	Y+14, r24	; 0x0e
  ba:	ec 85       	ldd	r30, Y+12	; 0x0c
  bc:	fd 85       	ldd	r31, Y+13	; 0x0d
  be:	00 82       	st	Z, r0
  c0:	8c 85       	ldd	r24, Y+12	; 0x0c
  c2:	9d 85       	ldd	r25, Y+13	; 0x0d
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	9d 87       	std	Y+13, r25	; 0x0d
  c8:	8c 87       	std	Y+12, r24	; 0x0c
  ca:	98 89       	ldd	r25, Y+16	; 0x10
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	98 8b       	std	Y+16, r25	; 0x10
  d0:	e8 89       	ldd	r30, Y+16	; 0x10
  d2:	ee 23       	and	r30, r30
  d4:	51 f7       	brne	.-44     	; 0xaa <main+0x28>
CLR_BIT(DDRA,DIO_u8PIN0);  // sw1 i/p
  d6:	ab e3       	ldi	r26, 0x3B	; 59
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	eb e3       	ldi	r30, 0x3B	; 59
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	8c 93       	st	X, r24
CLR_BIT(DDRA,DIO_u8PIN1);  // sw2 i/p
  e4:	ab e3       	ldi	r26, 0x3B	; 59
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	eb e3       	ldi	r30, 0x3B	; 59
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	8c 93       	st	X, r24
PORTA=0;                   //sw1,sw2 off
  f2:	ea e3       	ldi	r30, 0x3A	; 58
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	10 82       	st	Z, r1
DDRB=0xff;                 // 7segment o/p
  f8:	e7 e3       	ldi	r30, 0x37	; 55
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	80 83       	st	Z, r24
PORTB=0;                   // 7segment off
 100:	e8 e3       	ldi	r30, 0x38	; 56
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	10 82       	st	Z, r1
u8 count=0;
 106:	19 82       	std	Y+1, r1	; 0x01
while(1){
	if(GET_BIT(PINA,DIO_u8PIN0)==1&&GET_BIT(PINA,DIO_u8PIN1)!=1){
 108:	e9 e3       	ldi	r30, 0x39	; 57
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	81 70       	andi	r24, 0x01	; 1
 114:	90 70       	andi	r25, 0x00	; 0
 116:	98 2f       	mov	r25, r24
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	89 27       	eor	r24, r25
 11c:	88 23       	and	r24, r24
 11e:	31 f5       	brne	.+76     	; 0x16c <main+0xea>
 120:	e9 e3       	ldi	r30, 0x39	; 57
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	86 95       	lsr	r24
 128:	88 2f       	mov	r24, r24
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	90 70       	andi	r25, 0x00	; 0
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	e1 f4       	brne	.+56     	; 0x16c <main+0xea>
	   while(GET_BIT(PINA,DIO_u8PIN0)==1);
 134:	e9 e3       	ldi	r30, 0x39	; 57
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	90 70       	andi	r25, 0x00	; 0
 142:	88 23       	and	r24, r24
 144:	b9 f7       	brne	.-18     	; 0x134 <main+0xb2>
		if(count<9&&count>=0)
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	89 30       	cpi	r24, 0x09	; 9
 14a:	f0 f6       	brcc	.-68     	; 0x108 <main+0x86>
		{
		   count++;
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	89 83       	std	Y+1, r24	; 0x01
		   PORTB=seg_cath[count];
 152:	a8 e3       	ldi	r26, 0x38	; 56
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	28 2f       	mov	r18, r24
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	ce 01       	movw	r24, r28
 15e:	02 96       	adiw	r24, 0x02	; 2
 160:	fc 01       	movw	r30, r24
 162:	e2 0f       	add	r30, r18
 164:	f3 1f       	adc	r31, r19
 166:	80 81       	ld	r24, Z
 168:	8c 93       	st	X, r24
 16a:	ce cf       	rjmp	.-100    	; 0x108 <main+0x86>
		}
	}
	else if(GET_BIT(PINA,DIO_u8PIN1)==1&&GET_BIT(PINA,DIO_u8PIN0)!=1){
 16c:	e9 e3       	ldi	r30, 0x39	; 57
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	86 95       	lsr	r24
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	81 70       	andi	r24, 0x01	; 1
 17a:	90 70       	andi	r25, 0x00	; 0
 17c:	88 23       	and	r24, r24
 17e:	21 f2       	breq	.-120    	; 0x108 <main+0x86>
 180:	e9 e3       	ldi	r30, 0x39	; 57
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	90 70       	andi	r25, 0x00	; 0
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	09 f0       	breq	.+2      	; 0x194 <main+0x112>
 192:	ba cf       	rjmp	.-140    	; 0x108 <main+0x86>
		while(GET_BIT(PINA,DIO_u8PIN1)==1);
 194:	e9 e3       	ldi	r30, 0x39	; 57
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	86 95       	lsr	r24
 19c:	88 2f       	mov	r24, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	90 70       	andi	r25, 0x00	; 0
 1a4:	88 23       	and	r24, r24
 1a6:	b1 f7       	brne	.-20     	; 0x194 <main+0x112>
		 if(count>0&&count<=9)
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	88 23       	and	r24, r24
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <main+0x12e>
 1ae:	ac cf       	rjmp	.-168    	; 0x108 <main+0x86>
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	8a 30       	cpi	r24, 0x0A	; 10
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <main+0x136>
 1b6:	a8 cf       	rjmp	.-176    	; 0x108 <main+0x86>
		 {
		count--;
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	89 83       	std	Y+1, r24	; 0x01
		PORTB=seg_cath[count];
 1be:	a8 e3       	ldi	r26, 0x38	; 56
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	ce 01       	movw	r24, r28
 1ca:	02 96       	adiw	r24, 0x02	; 2
 1cc:	fc 01       	movw	r30, r24
 1ce:	e2 0f       	add	r30, r18
 1d0:	f3 1f       	adc	r31, r19
 1d2:	80 81       	ld	r24, Z
 1d4:	8c 93       	st	X, r24
 1d6:	98 cf       	rjmp	.-208    	; 0x108 <main+0x86>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
